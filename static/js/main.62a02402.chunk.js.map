{"version":3,"sources":["App.js","index.js"],"names":["App","useState","todos","setTodos","addTodo","setAddTodo","todoEditStatus","setTodoEditStatus","editingText","setEditingText","useEffect","json","localStorage","getItem","loadedTodos","JSON","parse","stringify","setItem","id","onSubmit","e","preventDefault","trim","newTodo","Date","getTime","text","completed","concat","type","onChange","target","value","placeholder","className","map","todo","checked","updatedTodos","toggleComplete","onClick","submitEdits","filter","deleteTodo","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oLAyIeA,EArIH,WAMV,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAGA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAMA,EAA4CJ,mBAAS,MAArD,mBAAOK,EAAP,KAAuBC,EAAvB,KAGA,EAAsCN,mBAAS,IAA/C,mBAAOO,EAAP,KAAoBC,EAApB,KA+DA,OA5DAC,qBAAU,WACR,IAAMC,EAAOC,aAAaC,QAAQ,SAC5BC,EAAcC,KAAKC,MAAML,GAC3BG,GACFX,EAASW,KAEV,IAGHJ,qBAAU,WACR,IAAMC,EAAOI,KAAKE,UAAUf,GAC5BU,aAAaM,QAAQ,QAASP,KAC7B,CAACT,IAiDF,sBAAKiB,GAAG,YAAR,UAEE,uBAAMC,SAjDV,SAAsBC,GAIpB,GAHAA,EAAEC,iBAGGlB,EAAQmB,OAAb,CAEA,IAAMC,EAAU,CACd,CAEEL,IAAI,IAAIM,MAAOC,UACfC,KAAMvB,EACNwB,WAAW,IAGfzB,EAAS,YAAID,GAAO2B,OAAOL,IAC3BnB,EAAW,MAkCT,UACE,uBACEyB,KAAK,OACLC,SAAU,SAACV,GAAD,OAAOhB,EAAWgB,EAAEW,OAAOC,QACrCA,MAAO7B,EACP8B,YAAY,0BACZC,UAAU,gBAEZ,wBAAQL,KAAK,SAAb,yBAED5B,EAAMkC,KAAI,SAACC,GAAD,OACT,sBAAmBF,UAAU,WAA7B,UAEE,sBAAKA,UAAU,WAAf,UACE,uBACEL,KAAK,WACLX,GAAG,YACHmB,QAASD,EAAKT,UACdG,SAAU,kBA5CtB,SAAwBZ,GACtB,IAAIoB,EAAe,YAAIrC,GAAOkC,KAAI,SAACC,GAIjC,OAHIA,EAAKlB,KAAOA,IACdkB,EAAKT,WAAaS,EAAKT,WAElBS,KAETlC,EAASoC,GAqCiBC,CAAeH,EAAKlB,OAErCkB,EAAKlB,KAAOb,EACX,uBACEwB,KAAK,OACLC,SAAU,SAACV,GAAD,OAAOZ,EAAeY,EAAEW,OAAOC,QACzCE,UAAU,YACVD,YAAY,iBAIZ,qBAAKC,UAAWE,EAAKT,UAAY,OAAS,GAA1C,SAA+CS,EAAKV,UAI1D,gCACGU,EAAKlB,KAAOb,EACX,wBAAQmC,QAAS,kBAnD7B,SAAqBtB,GACnB,IAAMoB,EAAe,YAAIrC,GAAOkC,KAAI,SAACC,GAMnC,OAHIA,EAAKlB,KAAOA,IACdkB,EAAKV,KAAOnB,GAEP6B,KAETlC,EAASoC,GACThC,EAAkB,MAyCemC,CAAYL,EAAKlB,KAAxC,0BAEE,wBAAQsB,QAAS,kBAAMlC,EAAkB8B,EAAKlB,KAA9C,kBAGJ,wBAAQsB,QAAS,kBAvE3B,SAAoBtB,GAClB,IAAIoB,EAAe,YAAIrC,GAAOyC,QAAO,SAACN,GAAD,OAAUA,EAAKlB,KAAOA,KAC3DhB,EAASoC,GAqEsBK,CAAWP,EAAKlB,KAAvC,yBA7BMkB,EAAKlB,WC9FvB0B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.62a02402.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styles from './index.css';\n\n\nconst App = () => {\n  // 這個 todos 則是所有下方 todo list 的內容， 這個 state 的 setTodos 主要處理 :\n  //  1. 在 submit 時更新 todo list \n  //  2. 在 delete 時更新 todo list \n  //  3. 在 checkbox 點框框 toggle 時更新 todo list 內部的 complete 狀態用來呈現完成 todo \n  //  4. 在 edit 完成後更新 todo list\n  const [todos, setTodos] = useState([]);\n\n  // 這邊是 form 填寫加入新的 todo ，這個 state 的setAddTodo 主要處理 1.清空 add todo 的 input 2. 雙向綁定回去 add todo 的 value\n  const [addTodo, setAddTodo] = useState('');\n\n  // 這邊是 todo list edit 的狀態，主要傳入每個點 edit todo 的 id 並用來判斷是否在正修改中\n  // 1. 如果不在修改中 => 也就是正常狀態就會顯示 todo.text 等於正常顯示 todo List\n  // 2. 正在修改中    => 則會顯示另一個 input 來修改 todo list 內容\n  // 這邊的 setTodoEditStatus 則是處理當點擊時候更新 state 為 todo.id ，以及送出修改內容時清空 state \n  const [todoEditStatus, setTodoEditStatus] = useState(null);\n\n  // 這邊是 edit 的內容的 state ，而 setEditingText 則會處理把 edit 過後的內容放入 state 也就是 editingText 內\n  const [editingText, setEditingText] = useState('');\n\n  // 這部分主要把 todo 的資料從 localStorage 提取出來，因為提取出來只要畫面更新時做一次就好所以後面陣列為空\n  useEffect(() => {\n    const json = localStorage.getItem('todos');\n    const loadedTodos = JSON.parse(json);\n    if (loadedTodos) {\n      setTodos(loadedTodos);\n    }\n  }, []);\n\n  // 這部分主要把 todo 的資料丟進去 localStorage，監聽 todos 在每次 todos 更新時把資料放進去 loacalStorage\n  useEffect(() => {\n    const json = JSON.stringify(todos);\n    localStorage.setItem('todos', json);\n  }, [todos]);\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    // 這行判斷式主要處理當輸入的 todo 為空時則直接 return 結束函式\n    if (!addTodo.trim()) return;\n\n    const newTodo = [\n      {\n        // 使用時間就會每一個都不一樣\n        id: new Date().getTime(),\n        text: addTodo,\n        completed: false,\n      }\n    ];\n    setTodos([...todos].concat(newTodo));\n    setAddTodo('');\n  }\n\n  function deleteTodo(id) {\n    let updatedTodos = [...todos].filter((todo) => todo.id !== id);\n    setTodos(updatedTodos);\n  }\n\n  function toggleComplete(id) {\n    let updatedTodos = [...todos].map((todo) => {\n      if (todo.id === id) {\n        todo.completed = !todo.completed;\n      }\n      return todo;\n    });\n    setTodos(updatedTodos);\n  }\n\n  function submitEdits(id) {\n    const updatedTodos = [...todos].map((todo) => {\n\n      // 這邊用判斷式比確認要改的 todo 是哪一隻確認成功則 替換 todo.text 為修改後的內容\n      if (todo.id === id) {\n        todo.text = editingText;\n      }\n      return todo;\n    });\n    setTodos(updatedTodos);\n    setTodoEditStatus(null);\n  }\n\n  return (\n    <div id=\"todo-list\">\n\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          onChange={(e) => setAddTodo(e.target.value)}\n          value={addTodo}\n          placeholder=\"key in new todo here...\"\n          className=\"addtodoform\"\n        />\n        <button type=\"submit\">Add Todo</button>\n      </form>\n      {todos.map((todo) => (\n        <div key={todo.id} className=\"todolist\">\n\n          <div className=\"todotext\">\n            <input\n              type=\"checkbox\"\n              id=\"completed\"\n              checked={todo.completed}\n              onChange={() => toggleComplete(todo.id)}\n            />\n            {todo.id === todoEditStatus ? (\n              <input\n                type=\"text\"\n                onChange={(e) => setEditingText(e.target.value)}\n                className=\"editinput\"\n                placeholder=\"edit todo...\"\n\n              />\n            ) : (\n                <div className={todo.completed ? \"done\" : ''}>{todo.text}</div>\n              )}\n          </div>\n\n          <div>\n            {todo.id === todoEditStatus ? (\n              <button onClick={() => submitEdits(todo.id)}>Submit Edits</button>\n            ) : (\n                <button onClick={() => setTodoEditStatus(todo.id)}>Edit</button>\n              )}\n\n            <button onClick={() => deleteTodo(todo.id)}>Delete</button>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}